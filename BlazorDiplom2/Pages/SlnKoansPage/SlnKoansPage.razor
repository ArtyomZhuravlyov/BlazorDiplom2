@page "/slnkoans"

@using Microsoft.EntityFrameworkCore
@using System.Text
@inject DB _db;
@inject UserManager<AspNetUsers> _userManager;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject CompileService compServive;
@*@inject Service _service*@
<h3>SlnKoansPage</h3>
@if (isLoaded)
{
     <div>
        @foreach (var item in listModules)
        {
            <div @onclick="()=>SelectModul(item)">Модуль @(listModules.IndexOf(item)+1). @item.Name</div>
            <div>
                @if (listIdModuleInvisible.Contains(item))
                {
                    <button type="button" @onclick="(()=>ChangeVisibleModule(item))">раскрыть</button>
                }
                else
                {
                    <button type="button" @onclick="(()=>ChangeVisibleModule(item))">скрыть</button>
                }
                <div style=@GetVisibleClass(item)>
                    @foreach (var kInM in item.KoanInModules.OrderBy(x => x.Priority))
                    {
                        <div>@kInM.Koan.Name</div>
                        @if (student.KoanInModules.Contains(kInM))
                        {
                            <div>выполнен</div>
                        }
                    }
                    <div @onclick="()=> isTest = true">Тест по модулю @(listModules.IndexOf(item)+1)</div>
                </div>
            </div>
        }
    </div>

    @if(!isTest)
    {
       

    <div>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="10" @bind="@codeKoan"></textarea>
        @if (listKoans.IndexOf(curKoan) > 0)
        {
            <button type="button" class="btn btn-primary" @onclick="BackKoan">Назад</button>
        }

        <button type="button" class="btn btn-primary" @onclick="CheckAsync">Проверить</button>
           <button type="button" class="btn btn-primary" @onclick="ReadFileKoanAsync">Обновить</button>
        @if (listKoans.IndexOf(curKoan) < listKoans.Count && student.KoanInModules.Contains(curModule.KoanInModules.First(x => x.KoanId.Equals(curKoan.Id))))
        {
            <button type="button" class="btn btn-primary" @onclick="NextKoan">Вперёд</button>
        }
    </div>
    <div>@curKoan.Description</div>
    <div>@message</div>
        <div>@log</div>
    }
    else
    {
         <div>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="10" @bind="@codeKoan"></textarea>
        @if (listKoans.IndexOf(curKoan) > 0)
        {
            <button type="button" class="btn btn-primary" @onclick="BackKoan">Назад</button>
        }

        <button type="button" class="btn btn-primary" @onclick="SendResultKoan">Следующий</button>
           <button type="button" class="btn btn-primary" @onclick="ReadFileKoanAsync">Обновить</button>
        @if (listKoans.IndexOf(curKoan) < listKoans.Count )
        {
            <button type="button" class="btn btn-primary" @onclick="NextKoan">Вперёд</button>
        }
    </div>
    }

}
else
{
    <div>Loading</div>
}


@code {
    string codeKoan;
    string message = "";
    string log = "";
    IEnumerable<Koan> koans;

    bool isTest = false;

    List<Koan> listKoans = new();
    Koan curKoan;
    int numberCurKoan
    {
        get
        {
            return listKoans.IndexOf(curKoan);
        }
    }

    Module curModule;
    int numberCurModule
    {
        get
        {
            return listModules.IndexOf(curModule);
        }
    }
    //List<KoanInModule> CurKoansInModule = new();
    int countAllLessons;
    int curLesson;
    bool showList = true;
    Student student;
    bool isLoaded;
    List<Module> listModules;
    List<Module> listIdModuleInvisible = new();


    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var aspUser = await _userManager.GetUserAsync(user);
        //student = _db.Students.First(x => x.AspNetUsersId.Equals(aspUser.Id));
        //_db.Entry(student).Reference(x => x.Group).Load();// .Collection
        //aspUser.Student = _db.Students.First();// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        //_db.SaveChanges();
        student = _db.Students.Include(x => x.AspNetUser)
            .Include(x => x.Group)
                .ThenInclude(x => x.Courses)
                    .ThenInclude(x => x.Modules)
                        .ThenInclude(x => x.KoanInModules)
                            .ThenInclude(x => x.Koan)
            .Include(x => x.Group)
                .ThenInclude(x => x.Courses)
                    .ThenInclude(x => x.Modules)
                        .ThenInclude(x => x.Test)
                            .ThenInclude(x => x.KoanInTests)
                                .ThenInclude(x => x.Koan)
            .Include(x=>x.KoanInModules)
            .First(x => x.AspNetUser == aspUser);
        //student.Group.Courses.Add(_db.Courses.First(x => x.Id == 10));
        //_db.SaveChanges();
        listModules = student.Group.Courses.First().Modules.OrderBy(x => x.Priority).ToList(); //!!!!!!!!!!!
        SelectModul(listModules.First());//!!!!!!!!!!!!!!!!!!
        await compServive.InitAsync();
        isLoaded = true;
    }

    private void SelectModul(Module module)
    {
        curModule = module;
        var koansInM = module.KoanInModules.OrderBy(x => x.Priority);
        listKoans = koansInM.Select(x => x.Koan).ToList();

        curKoan = koansInM.First().Koan;
        foreach (var item in koansInM)
        {
            if (!student.KoanInModules.Contains(item))
            {
                curKoan = item.Koan;
                break;
            }
        }
        ReadFileKoanAsync();

    }

    private void SelectKoan(Module module, Koan koan)
    {
        //туду проверка на возможность открывать этот коан

        var koansInM = module.KoanInModules.OrderBy(x => x.Priority);

        if (curModule != module)
        {
            curModule = module;
            listKoans = koansInM.Select(x => x.Koan).ToList();
        }

        curKoan = koansInM.First(x => x.KoanId.Equals(koan.Id)).Koan;

        ReadFileKoanAsync();

    }

    private async void ReadFileKoanAsync()
    {
        using (FileStream fstream = File.OpenRead(curKoan.Link))
        {
            byte[] buffer = new byte[fstream.Length];
            await fstream.ReadAsync(buffer, 0, buffer.Length);
            codeKoan = Encoding.Default.GetString(buffer);
        }
        this.StateHasChanged();
    }

    public async Task CheckAsync()
    {
        (string, bool) ValueTuple = ("", false);
        compServive.CompileLog = new List<string>();
        try
        {
            ValueTuple = await compServive.CompileAndRun(codeKoan);
            message = ValueTuple.Item1;
        }
        catch (Exception e)
        {
            //message= $"{e.Message}\\r\n\\{e.StackTrace}";
            compServive.CompileLog.Add(e.Message);
            compServive.CompileLog.Add(e.StackTrace);
            message = "Ошибка";
        }
        log = string.Join("\r\n", compServive.CompileLog);
        this.StateHasChanged();


        if (ValueTuple.Item2 && !student.KoanInModules.Contains(curModule.KoanInModules.First(x => x.KoanId.Equals(curKoan.Id))))
        {
            student.KoanInModules.Add(curModule.KoanInModules.First(x => x.KoanId.Equals(curKoan.Id)));
            _db.SaveChanges();
        }

    }

    private void SendResultKoan()
    {
        
    }

    private void Delete(Koan delKoan)
    {
        //thisTeacher.Koans.Remove(delKoan);
        //_db.Koans.Remove(delKoan);//если нет каскадного удаления и проверить для модуля

        _db.SaveChanges();
    }

    private void NextKoan()
    {
        if (numberCurKoan + 1 <= listKoans.Count)
        {
            curKoan = listKoans.ElementAt(numberCurKoan + 1);
            SelectKoan(curModule, curKoan);
        }
        else
        {
            NextModule();
        }

    }

    private void NextModule()
    {
        if (numberCurModule + 1 <= listModules.Count)
        {
            curModule = listModules.ElementAt(numberCurModule + 1);
        }
        else
        {
            //все модули пройдены
        }

    }



    private void BackKoan()
    {
        curKoan = listKoans.ElementAt(numberCurKoan - 1);
            SelectKoan(curModule, curKoan);
    }

    private void ShowList()
    {
        showList = true;
    }

    private void ChangeVisibleModule(Module module)
    {
        if (listIdModuleInvisible.Contains(module))
            listIdModuleInvisible.Remove(module);
        else
            listIdModuleInvisible.Add(module);
    }

    private string GetVisibleClass(Module module)
    {
        if (listIdModuleInvisible.Contains(module))
            return "display: none;";
        else
            return "";
    }

}
