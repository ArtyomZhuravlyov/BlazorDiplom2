<h3>DescriptionTest</h3>
<div>Количество Коанов @CurModule.Test.KoanInTests.Count</div>
<div>Время @CurModule.Test.Time</div>
<div>Проходной балл @CurModule.Test.MinScore</div>
@if (locStorageTest != null)
{
   @* @switch (locStorageTest.GetStatus())
    {
        case Enums.StatusTest.NotStart:
   
            <button @onclick="()=>StartTest.InvokeAsync()">Начать тест</button>
            break;
        case Enums.StatusTest.InProgress:
            <button>Продолжить тест</button> 
            break;
        case Enums.StatusTest.End:
            <div>Тест завершён</div>
            break;
    }*@
}

@code {
    [Parameter] public EventCallback<Test> StartTest { get; set; }

    [CascadingParameter(Name = "CurModule")]
    public Module CurModule { get; set; }

    LocStorageTest locStorageTest;

    //[CascadingParameter(Name = "CurKoan")]
    //public Koan CurKoan { get; set; }

    //[CascadingParameter(Name = "HttpContextAccessor")]
    //public IHttpContextAccessor HttpContextAccessor { get; set; }

    //[CascadingParameter(Name = "Cookies")]
    //public List<Cookie> Cookies { get; set; }

    protected override async Task OnInitializedAsync()
    {

        //  HttpContextAccessor.HttpContext.Response.Cookies.Append("TestK", Newtonsoft.Json.JsonConvert.SerializeObject(new CookieTest()));
        //var test = Cookie.GetTestCookies();
        //Cookie.HttpContextAccessor.HttpContext.Response.Cookies.Append("TestK", Newtonsoft.Json.JsonConvert.SerializeObject(test));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if(LocStorage.LocalStorage == null)
        if(firstRender)
        {
        //locStorageTest = await LocStorage.GetTestLocalStorageAsync();
        StateHasChanged();
        }

    }

    //private void StartTest()
    //{

    //}
}
