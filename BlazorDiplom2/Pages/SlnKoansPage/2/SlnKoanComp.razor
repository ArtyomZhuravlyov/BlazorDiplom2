@using System.Text
<h3>slnKoanComp</h3>
@if(IsTest)
{
             <div>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="10" @bind="@CodeKoan"></textarea>
        @if (listKoans.IndexOf(CurKoan) > 0)
        {
            <button type="button" class="btn btn-primary" @onclick="BackKoan">Назад</button>
        }

        
           <button type="button" class="btn btn-primary" @onclick="ReadFileKoanAsync">Обновить</button>
        @if (listKoans.IndexOf(CurKoan) < listKoans.Count )
        {
            <button type="button" class="btn btn-primary" @onclick="SendResultKoan">Следующий</button>
        }
        else
        {
            <button type="button" class="btn btn-primary" @onclick="SendResultKoan">Закончить</button>
        }
    </div>
}
else
{
    <div>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="10" @bind="@CodeKoan"></textarea>
        @if (listKoans.IndexOf(CurKoan) > 0)
        {
            <button type="button" class="btn btn-primary" @onclick="BackKoan">Назад</button>
        }

        <button type="button" class="btn btn-primary" @onclick="CheckAsync">Проверить</button>
        <button type="button" class="btn btn-primary" @onclick="ReadFileKoanAsync">Обновить</button>
        @if (listKoans.IndexOf(CurKoan) < listKoans.Count && student.KoanInModules.Contains(CurModule.KoanInModules.First(x => x.KoanId.Equals(CurKoan.Id))))
        {
            <button type="button" class="btn btn-primary" @onclick="NextKoan">Вперёд</button>
        }
    </div>
    <div>@CurKoan.Description</div>

}



@code {

    [Parameter]
    public bool IsTest { get; set; }

    [CascadingParameter(Name = "Student")]
    public Student Student { get; set; }

    [CascadingParameter(Name = "CurKoan")]
    public Koan CurKoan { get; set; }

    [CascadingParameter(Name = "CurModule")]
    public Module CurModule { get; set; }
    //[CascadingParameter(Name = "CurTest")]
    //public Test CurTest { get; set; }
    [CascadingParameter(Name = "BackKoan")]
    public EventCallback BackKoan { get; set; }
    [CascadingParameter(Name = "NextKoan")]
    public EventCallback NextKoan { get; set; }

    [CascadingParameter(Name = "CheckAsync")]
    public EventCallback CheckAsync { get; set; }

    [CascadingParameter(Name = "RefreshGui")]
    public EventCallback RefreshGui { get; set; }

    [CascadingParameter(Name = "SendResultKoan")]
    public EventCallback SendResultKoan { get; set; }

    [CascadingParameter(Name = "ReadFileKoanAsync")]
    public EventCallback ReadFileKoanAsync { get; set; }


     [CascadingParameter(Name = "CodeKoan")]
    public string CodeKoan { get; set; }

    //string codeKoan;
    string message = "";
    string log = "";
    IEnumerable<Koan> koans;



    List<Koan> listKoans = new();


    protected override async Task OnInitializedAsync()
    {

        if(IsTest)
        {
            CurKoan = CurModule.Test.KoanInTests.OrderBy(x => x.Priority).First().Koan;
            await ReadFileKoanAsync.InvokeAsync();//ReadFileKoanAsync();//await ReadFileKoanAsync.InvokeAsync();
        }
    }

    //Koan curKoan;
    int numberCurKoan
    {
        get
        {
            return listKoans.IndexOf(CurKoan);
        }
    }

    //Module curModule;
    int numberCurModule
    {
        get
        {
            return listModules.IndexOf(CurModule);
        }
    }
    //List<KoanInModule> CurKoansInModule = new();
    int countAllLessons;
    int curLesson;
    bool showList = true;
    Student student;
    bool isLoaded;
    List<Module> listModules;
    List<Module> listIdModuleInvisible = new();

    //private async void ReadFileKoanAsync()
    //{
    //    using (FileStream fstream = File.OpenRead(CurKoan.Link))
    //    {
    //        byte[] buffer = new byte[fstream.Length];
    //        await fstream.ReadAsync(buffer, 0, buffer.Length);
    //        codeKoan = Encoding.Default.GetString(buffer);
    //    }
    //    this.StateHasChanged();
    //}

}
