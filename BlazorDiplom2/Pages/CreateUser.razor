@using BlazorDiplom2.ModelForm
@inject RoleManager<IdentityRole> _RoleManager;
@inject UserManager<AspNetUsers> _userManager;
@inject IUserStore<AspNetUsers> _userStore;
@inject DB _db;


<div>@mes</div>
 @if (CurrentRole == Enums.Roles.Teacher)
{

    <EditForm Model="TeacherModelForm" OnValidSubmit="OnValidSubmitTeacherAsync">
        <DataAnnotationsValidator />
        <label>teacherModelForm.UserName</label>
        <InputText class="form-control" @bind-Value="TeacherModelForm.UserName"></InputText>
        <label>teacherModelForm.Email</label>
        <InputText class="form-control" @bind-Value="TeacherModelForm.Email"></InputText>

        <label>teacherModelForm.Password</label>
        <InputText class="form-control" @bind-Value="TeacherModelForm.Password"></InputText>

        <label>teacherModelForm.FirstName</label>
        <InputText class="form-control" @bind-Value="TeacherModelForm.FirstName"></InputText>

        <label>teacherModelForm.LastName</label>
        <InputText class="form-control" @bind-Value="TeacherModelForm.LastName"></InputText>
        <label>teacherModelForm.FatherName</label>
        <InputText class="form-control" @bind-Value="TeacherModelForm.FatherName"></InputText>
        <button class="btn btn-primary">Добавить</button>
    </EditForm>
}
else
{
    <EditForm Model="StudentModelForm" OnValidSubmit="OnValidSubmitStudentAsync">
        <DataAnnotationsValidator />
        <label>studentModelForm.UserName</label>
        <InputText class="form-control" @bind-Value="StudentModelForm.UserName"></InputText>
        <label>studentModelForm.Email</label>
        <InputText class="form-control" @bind-Value="StudentModelForm.Email"></InputText>

        <label>studentModelForm.Password</label>
        <InputText class="form-control" @bind-Value="StudentModelForm.Password"></InputText>

        <label>studentModelForm.FirstName</label>
        <InputText class="form-control" @bind-Value="StudentModelForm.FirstName"></InputText>

        <label>studentModelForm.LastName</label>
        <InputText class="form-control" @bind-Value="StudentModelForm.LastName"></InputText>
        <label>studentModelForm.FatherName</label>
        <InputText class="form-control" @bind-Value="StudentModelForm.FatherName"></InputText>
        <InputSelect class="form-control" @bind-Value="StudentModelForm.Group">
            <option value="-1">Выберите группу</option>
            @foreach (var item in groups)
            {
            <option value="@item.Id.ToString()">@item.Name</option>
            }
    </InputSelect>
    <button class="btn btn-primary">Добавить</button>
</EditForm>
}


@code {
    [Parameter] public Enums.Roles CurrentRole { get; set; }
    [Parameter] public TeacherModelForm TeacherModelForm { get; set; }
    [Parameter] public StudentModelForm StudentModelForm { get; set; }

    // [Parameter] public EventCallback<TeacherModelForm> AddTeacher { get; set; }
    [Parameter] public EventCallback Refresh { get; set; }

    string mes = "";


    List<Group> groups;

    protected override async Task OnInitializedAsync()
    {

        groups = _db.Groups.ToList();
    }

    private async Task OnValidSubmitTeacherAsync()
    {


        if ((await _userManager.FindByNameAsync(TeacherModelForm.UserName)) != null)
        {
            mes = "Пользователь с таким именем уже существует";

            return;
        }
        mes = "";

        Teacher teacher = new()
            {
                FirstName = TeacherModelForm.FirstName,
                LastName = TeacherModelForm.LastName,
                FatherName = TeacherModelForm.FatherName
            };

        _db.Teachers.Add(teacher);

        var user = Activator.CreateInstance<AspNetUsers>();
        await _userStore.SetUserNameAsync(user, TeacherModelForm.UserName, CancellationToken.None);
        user.Teacher = teacher;
        await _userManager.CreateAsync(user, TeacherModelForm.Password);

        await ((IUserEmailStore<AspNetUsers>)_userStore).SetEmailAsync(user, TeacherModelForm.Email, CancellationToken.None);

        await _userManager.AddToRoleAsync(user, "Teachers" /*Enums.Roles.Student.ToString()*/);

        TeacherModelForm = new TeacherModelForm();
        await Refresh.InvokeAsync();

    }


    private async Task OnValidSubmitStudentAsync()
    {

        if ((await _userManager.FindByNameAsync(StudentModelForm.UserName)) != null)
        {
            mes = "Пользователь с таким именем уже существует";

            return;
        }
        mes = "";
        var group = groups.First(x => x.Id.ToString() == StudentModelForm.Group);

        Student student = new()
            {
                FirstName = StudentModelForm.FirstName,
                LastName = StudentModelForm.LastName,
                FatherName = StudentModelForm.FatherName,
                Group = group
            };

        _db.Students.Add(student);

        var user = Activator.CreateInstance<AspNetUsers>();
        await _userStore.SetUserNameAsync(user, StudentModelForm.UserName, CancellationToken.None);
        user.Student = student;
        await _userManager.CreateAsync(user, StudentModelForm.Password);

        await ((IUserEmailStore<AspNetUsers>)_userStore).SetEmailAsync(user, StudentModelForm.Email, CancellationToken.None);

        await _userManager.AddToRoleAsync(user, "Students" /*Enums.Roles.Student.ToString()*/);

        StudentModelForm = new StudentModelForm();
        await Refresh.InvokeAsync();


    }


}
