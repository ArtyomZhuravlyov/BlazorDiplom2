@using Microsoft.EntityFrameworkCore
@inject DB _db;
@inject UserManager<AspNetUsers> _userManager;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<h3>CreateEditCourse</h3>
@if (edit)
{
    <button @onclick="ShowList">Назад</button>
}
<div>@mesError</div>
@*<EditForm Model="Koan" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />
    <InputText class="form-control" @bind-Value="Koan.Name"></InputText>
    <InputText class="form-control" @bind-Value="Koan.Description"></InputText>
    <InputFile OnChange="@LoadFiles" />
    @if (isLoading)
    {
    <p>Uploading...</p>
    }
    <button>@messageBtn</button>
    </EditForm>*@
@*<form>

    </form>*@

<div>
    <label>Название</label>
    <input type="text" @bind="Course.Name" />
    <label>Описание</label>
    <input type="text" @bind="Course.Description" />


    @foreach (var modul in modules)
    {
        <label>Модуль @modules.IndexOf(modul)</label>
        <button @onclick="(()=>modules.Remove(modul))">X</button>
        if (listIdModuleInvisible.Contains(modul))
        {
            <button @onclick="(()=>ChangeVisibleModule(modul))">раскрыть</button>
        }
        else
        {
            <button @onclick="(()=>ChangeVisibleModule(modul))">скрыть</button>
        }

        <div style="@GetVisibleClass(modul)">
            <label>Название модуля</label>
            <input type="text" @bind="modul.Name" />

            @foreach (var koanInModule in modul.KoanInModules)
            {
                <label>Коан</label>
                <select @bind="koanInModule.Koan.Name">

                    @if (koanInModule.Koan.Name == null)
                    {
                        <option selected value="-1">Выберите коан</option>
                    }

                    @foreach (var item in koansName)
                    {
                        @if (String.Equals(item, koanInModule.Koan.Name,
                       StringComparison.OrdinalIgnoreCase))
                        {
                            <option selected value="@koanInModule.Koan.Name">@koanInModule.Koan.Name</option>
                        }
                        else
                        {
                            <option value="@item">@item</option>
                        }

                    }

                </select>
                <button @onclick="()=>modul.KoanInModules.Remove(koanInModule)">X</button>
            }
            <button @onclick="()=>AddEmptyKoanInModule(modul)">Добавить ещё один коан в модуль</button>
        </div>
        <div>
            <label>Тест</label>
            <label>Время</label>
            <input type="time" @bind="modul.Test.Time" />
            <label>Проходной балл</label>
            <input type="number" @bind="modul.Test.MinScore" />
            @foreach (var koanInTest in modul.Test.KoanInTests)
            {
                <label>Коан</label>
                <select @bind="koanInTest.Koan.Name">
                    @if (koanInTest.Koan.Name == null)
                    {
                        <option selected value="-1">Выберите коан</option>
                    }

                    @foreach (var item in koansName)
                    {
                        @if (String.Equals(item, koanInTest.Koan.Name,
                       StringComparison.OrdinalIgnoreCase))
                        {
                            <option selected value="@koanInTest.Koan.Name">@koanInTest.Koan.Name</option>
                        }
                        else
                        {
                            <option value="@item">@item</option>
                        }

                    }
                </select>
                <button @onclick="()=>modul.Test.KoanInTests.Remove(koanInTest)">X</button>
            }
            <button @onclick="()=>AddEmptyKoanInTest(modul)">Добавить ещё один коан в тест</button>
        </div>
    }
    <button @onclick="AddEmptyModul">Добавить модуль</button>
    @*<button @onclick="()=>{modules.Add(new Module());}">Добавить модуль</button>*@




    @* @for (int i = 1; i <= Course.Modules.Count; i++)
        {
        <label>Модуль @i</label>
        <button @onclick="(()=>Course.Modules.Remove(Course.Modules[i - 1]))">X</button>
        if (listIdModuleInvisible.Contains(Course.Modules[i - 1].Id))
        {
        <button @onclick="(()=>ChangeVisibleModule(Course.Modules[i - 1].Id))">раскрыть</button>
        }
        else
        {
        <button @onclick="(()=>ChangeVisibleModule(Course.Modules[i - 1].Id))">скрыть</button>
        <label>Модуль @i</label>
        }

        <div style="@GetVisibleClass(Course.Modules[i - 1].Id)">
        <label>Название модуля</label>
        <input type="text" @bind="Course.Modules[i - 1].Name" />

        @for (int ik = 1; ik <= Course.Modules[i - 1].KoanInModules.Count; ik++)
        {
        <label>Коан</label>
        <select @bind="Course.Modules[i - 1].KoanInModules[ik].KoanId">
        @foreach (var item in Teacher.Koans)
        {
        <option value="@item.Name">@item.Name</option>
        }
        </select>
        }
        <button @onclick="()=>Course.Modules[i - 1].KoanInModules.Add(new KoanInModule())">Добавить коан</button>
        </div>
        }
        <button @onclick="()=>Course.Modules.Add(new Module())">Добавить модуль</button>*@
    @*     @foreach(var item in Course.Modules)
        {
        int count=0;
        if (idModuleInvisible.Contains(item.Id))
        continue;
        else
        {

        }
        }*@

    <button type="button" @onclick="OnValidSubmitAsync">@messageBtn</button>
</div>



@code {

    [Parameter] public Course Course { get; set; }

    [Parameter] public EventCallback ShowList { get; set; }

    [Parameter] public Teacher Teacher { get; set; }

    private List<Koan> koans = new();

    List<string> koansName = new();

    //private IEnumerable<Module> modules;

    private List<Module> modules;



    Dictionary<string, KoanInModule> dicStrKoansInModule;
    Dictionary<string, KoanInModule> dicStrKoansInTestInModule;



    List<Module> listIdModuleInvisible = new();

    private Test test;

    private bool edit;

    private string messageBtn;
    private string mesError = "";

    private bool isLoaded;

    protected override async Task OnInitializedAsync()
    {
        edit = Course.Id != 0;
        messageBtn = edit ? "Изменить" : "Добавить";
        if (!edit)
        {
            var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var user = authstate.User;
            var aspUser = await _userManager.GetUserAsync(user);
            Teacher = _db.Teachers.Include(x => x.AspNetUser).Include(x => x.Koans).First(x => x.AspNetUser == aspUser);
        }
        modules = Course.Modules.ToList();

        foreach(var m in modules)
        {
            foreach(var km in m.KoanInModules)
            {
                km.Koan = km.Koan.Copy();
                km.Koan.Id = 0;
            }

            foreach(var kt in m.Test.KoanInTests)
            {
                kt.Koan = kt.Koan.Copy();
                kt.Koan.Id = 0;
            }
        }
        // koansName = new List<Koan>(){", ""}
        koansName = _db.Koans.Where(x => x.TeacherId == Teacher.Id).Select(x=>x.Name).ToList(); // Teacher.Koans.Select(x=>x.Name).ToList();
                                                                                                  //isLoaded = true;
    }

    private async Task OnValidSubmitAsync()
    {
        var transaction = _db.Database.BeginTransaction();
        try
        {
            if (edit) //если изменяем
            {

                foreach (var module in modules)
                {
                    //module.Test.Time = Convert.ToDateTime(module.Test.Time.TimeOfDay.ToString());
                    module.Priority = modules.IndexOf(module);

                    foreach (var kModule in module.KoanInModules)
                    {
                        kModule.Priority = module.KoanInModules.IndexOf(kModule);
                        kModule.Koan = _db.Koans.First(x => x.Name == kModule.Koan.Name && x.TeacherId == Teacher.Id);

                        //var km = _db.KoanInModules.Attach(kModule);
                        //if (km == null)
                        //    _db.KoanInModules.Add(kModule);
                        //else
                        //{
                        //    km.State = Microsoft.EntityFrameworkCore.EntityState.Modified;

                        //}
                    }
                    //_db.SaveChanges();
                    //_db.KoanInModules.AddRange(module.KoanInModules);

                    foreach (var kTest in module.Test.KoanInTests)
                    {
                        kTest.Priority = module.Test.KoanInTests.IndexOf(kTest);
                        kTest.Koan = _db.Koans.First(x => x.Name == kTest.Koan.Name && x.TeacherId == Teacher.Id);

                        //var kt = _db.KoanInTests.Attach(kTest);
                        //if (kt == null)
                        //    _db.KoanInTests.Add(kTest);
                        //else
                        //{
                        //    kt.State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                        //    _db.SaveChanges();
                        //}
                    }
                    //_db.KoanInTests.AddRange(module.Test.KoanInTests);


                    //var m = _db.Modules.Attach(module);
                    //if (m == null)
                    //    _db.Modules.Add(module);
                    //else
                    //{
                    //    m.State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                    //    _db.SaveChanges();
                    //}
                }


                Course.Modules = modules;

                var course = _db.Courses.Attach(Course);
                course.State = Microsoft.EntityFrameworkCore.EntityState.Modified;

            }
            else //если добавляем
            {
                foreach (var module in modules)
                {
                    //module.Test.Time = Convert.ToDateTime(module.Test.Time.TimeOfDay);
                    module.Priority = modules.IndexOf(module);

                    foreach (var kModule in module.KoanInModules)
                    {
                        kModule.Priority = module.KoanInModules.IndexOf(kModule);
                        kModule.Koan = _db.Koans.First(x => x.Name == kModule.Koan.Name && x.TeacherId == Teacher.Id);
                    }
                    //_db.KoanInModules.AddRange(module.KoanInModules);

                    foreach (var kTest in module.Test.KoanInTests)
                    {
                        kTest.Priority = module.Test.KoanInTests.IndexOf(kTest);
                        kTest.Koan = _db.Koans.First(x => x.Name == kTest.Koan.Name && x.TeacherId == Teacher.Id);
                    }
                    //_db.KoanInTests.AddRange(module.Test.KoanInTests);

                }
                //_db.Modules.AddRange(modules);

                Course.Modules = modules;
                Course.Teacher = Teacher;
                _db.Courses.Add(Course);




            }
            _db.SaveChanges();
            Course = new Course();
            modules = new List<Module>();


            transaction.Commit();
            // Koan = new();
        }
        catch (Exception exp)
        {
            mesError = exp.Message;
            transaction.Rollback();
        }

    }

    private string GetVisibleClass(Module module)
    {
        if (listIdModuleInvisible.Contains(module))
            return "display: none;";
        else
            return "";
    }



    private void AddEmptyModul()
    {
        KoanInTest koanInTest = new()
            {
                Koan = new Koan()
            };
        //List<KoanInTest> koanInTests = new();
        //koanInTests.Add(koanInTest);


        Test test = new();
        test.KoanInTests.Add(koanInTest);
        //{
        //    KoanInTests = koanInTests
        //};

        Module module = new()
            {
                Test = test
            };

        KoanInModule koanInModule = new()
            {
                Koan = new Koan()
            };
        module.KoanInModules.Add(koanInModule);

        modules.Add(module);
    }

    private void AddEmptyKoanInModule(Module module)
    {
        KoanInModule koanInModule = new()
            {
                Koan = new Koan()
            };
        module.KoanInModules.Add(koanInModule);


    }

    private void AddEmptyKoanInTest(Module module)
    {
        KoanInTest koanInTest = new()
            {
                Koan = new Koan()
            };
        module.Test.KoanInTests.Add(koanInTest);
    }

    private void DeleteModule(Module module)
    {
        if (listIdModuleInvisible.Contains(module))
            listIdModuleInvisible.Remove(module);
        else
            listIdModuleInvisible.Add(module);
    }

    private void DelKoanInModule(Module module, KoanInModule koanInModule)
    {
        module.KoanInModules.Remove(koanInModule);
    }




    private void ChangeVisibleModule(Module module)
    {
        if (listIdModuleInvisible.Contains(module))
            listIdModuleInvisible.Remove(module);
        else
            listIdModuleInvisible.Add(module);
    }


}
