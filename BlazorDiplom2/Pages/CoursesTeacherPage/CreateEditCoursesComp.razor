@using Microsoft.EntityFrameworkCore
@inject DB _db;
@inject UserManager<AspNetUsers> _userManager;
@*@inject AuthenticationStateProvider GetAuthenticationStateAsync;*@

@if (edit)
{
    <button @onclick="ShowList">Назад</button>
}
<div>@mesError</div>


<EditForm class="new_course" Model="Course" OnValidSubmit="OnValidSubmit">
    <ObjectGraphDataAnnotationsValidator />
    @* <ValidationSummary />*@
    @* <DataAnnotationsValidator />*@

    <div class="course_item">
        <div class="main_name">Название</div>
        <InputText @bind-Value="Course.Name" />
    </div>
    <div class="course_item">
        <div class="main_name">Описание</div>
        <InputText @bind-Value="Course.Description" />
    </div>

    @foreach (var modul in Course.Modules)
    {
        <div class="course_item">

            <div class="module_item_name">
                @if (listIdModuleInvisible.Contains(modul))
                {
                <div class="arrow_item" @onclick="(()=>ChangeVisibleModule(modul))"><img src="img\arrow.png" alt=""></div>
                @*<button type="button" >раскрыть</button>*@
                }
                else
                {
                <div class="arrow_item" @onclick="(()=>ChangeVisibleModule(modul))"><img src="img\arrow.png" alt=""></div>
                @*скрыть сделать*@
                }
                <div class="main_name">Модуль @Course.Modules.IndexOf(modul)</div>
                <div class="del_item" @onclick="(()=>Course.Modules.Remove(modul))"><img src="img\del.png" alt=""></div>
            </div>


            <div style="@GetVisibleClass(modul)">
                <div class="module_item">
                    <div class="adding_name">Название</div>
                    <InputText @bind-Value="modul.Name" />
                </div>



                @foreach (var koanInModule in modul.KoanInModules)
                {
                    <div class="module_item">
                        <div class="adding_name">Коан</div>
                        <InputSelect @bind-Value="koanInModule.Koan.Name">

                            @if (koanInModule.Koan.Name == null)
                            {
                        <option selected value="-1">Выберите коан</option>
                            }

                    @foreach (var item in koansName)
                            {
                        @if (String.Equals(item, koanInModule.Koan.Name,
                       StringComparison.OrdinalIgnoreCase))
                                {
                            <option selected value="@koanInModule.Koan.Name">@koanInModule.Koan.Name</option>
                                }
                                else
                                {
                            <option value="@item">@item</option>
                                }

                            }

                </InputSelect>
                <InputText hidden type="text" @bind-Value="koanInModule.Koan.Description" />
                <div class="delete" @onclick="()=>modul.KoanInModules.Remove(koanInModule)"><img src="img\del.png" alt=""></div>
            </div>

                }
                <div class="add_new_koan" @onclick="()=>AddEmptyKoanInModule(modul)">Добавить ещё один коан в модуль</div>

            </div>
            <div class="module_item">

                <div class="main_name margin">Тест</div>
                <div class="time_score">
                    <div class="test_item">
                        <div class="adding_name">Время</div>
                        <InputDate Type="InputDateType.Time" @bind-Value="modul.Test.Time" />
                    </div>
                    <div class="test_item">
                        <InputNumber @bind-Value="modul.Test.MinScore" />
                        <input type="text">
                    </div>
                </div>

                @foreach (var koanInTest in modul.Test.KoanInTests)
                {
                    <div class="test_item">
                        <div class="adding_name">Коан</div>
                        <InputSelect @bind-Value="koanInTest.Koan.Name">
                            @if (koanInTest.Koan.Name == null)
                            {
                        <option selected value="-1">Выберите коан</option>
                            }

                    @foreach (var item in koansName)
                            {
                        @if (String.Equals(item, koanInTest.Koan.Name,
                       StringComparison.OrdinalIgnoreCase))
                                {
                            <option selected value="@koanInTest.Koan.Name">@koanInTest.Koan.Name</option>
                                }
                                else
                                {
                            <option value="@item">@item</option>
                                }

                            }
                </InputSelect>
                <InputText hidden @bind-Value="koanInTest.Koan.Description" />
                <div class="delete" @onclick="()=>modul.Test.KoanInTests.Remove(koanInTest)"><img src="img\del.png" alt=""></div>
            </div>

                }
                <div class="add_new_koan" @onclick="()=>AddEmptyKoanInTest(modul)">Добавить ещё один коан в тест</div>

            </div>
        </div>
    }

    <div class="add_new_module" @onclick="AddEmptyModul">Добавить ещё один модуль в курс</div>
    <button class="save_btn">Сохранить курс</button>
   @* <button class="save_btn">@messageBtn</button>*@
</EditForm>



@code {

    [Parameter] public Course Course { get; set; }

    [Parameter] public EventCallback ShowList { get; set; }

    [Parameter] public Teacher Teacher { get; set; }

    private List<Koan> koans = new();

    List<string> koansName = new();

    List<Module> listIdModuleInvisible = new();

    private Test test;

    private bool edit;

    private string messageBtn;
    private string mesError = "";

    private bool isLoaded;

    protected override async Task OnInitializedAsync()
    {
        edit = Course.Id != 0;
        messageBtn = edit ? Constants.BTN_CHANGE : Constants.BTN_ADD;
        if (!edit)
        {
            //var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            //var user = authstate.User;
            //var aspUser = await _userManager.GetUserAsync(user);
            //Teacher = _db.Teachers.Include(x => x.AspNetUser).Include(x => x.Koans).First(x => x.AspNetUser == aspUser);
            Teacher = _db.Teachers.Include(x => x.AspNetUser).Include(x => x.Koans).First(x => x.AspNetUser == CurrentUser.User);
        }

        foreach (var m in Course.Modules)
        {
            foreach (var km in m.KoanInModules)
            {
                km.Koan = km.Koan.Copy();
                km.Koan.Id = 0;
            }

            foreach (var kt in m.Test.KoanInTests)
            {
                kt.Koan = kt.Koan.Copy();
                kt.Koan.Id = 0;
            }
        }

        koansName = _db.Koans.Where(x => x.TeacherId == Teacher.Id).Select(x => x.Name).ToList();

    }

    private void OnValidSubmit()
    {
        try
        {

            if (edit) //если изменяем
            {

                foreach (var module in Course.Modules)
                {

                    module.Priority = Course.Modules.IndexOf(module);

                    foreach (var kModule in module.KoanInModules)
                    {
                        kModule.Priority = module.KoanInModules.IndexOf(kModule);
                        kModule.Koan = _db.Koans.First(x => x.Name == kModule.Koan.Name && x.TeacherId == Teacher.Id);
                    }

                    foreach (var kTest in module.Test.KoanInTests)
                    {
                        kTest.Priority = module.Test.KoanInTests.IndexOf(kTest);
                        kTest.Koan = _db.Koans.First(x => x.Name == kTest.Koan.Name && x.TeacherId == Teacher.Id);
                    }

                }

                //var course = _db.Courses.Attach(Course);
                //course.State = Microsoft.EntityFrameworkCore.EntityState.Modified;

            }
            else //если добавляем
            {
                foreach (var module in Course.Modules)
                {
                    module.Priority = Course.Modules.IndexOf(module);

                    foreach (var kModule in module.KoanInModules)
                    {
                        kModule.Priority = module.KoanInModules.IndexOf(kModule);
                        kModule.Koan = _db.Koans.First(x => x.Name == kModule.Koan.Name && x.TeacherId == Teacher.Id);
                    }

                    foreach (var kTest in module.Test.KoanInTests)
                    {
                        kTest.Priority = module.Test.KoanInTests.IndexOf(kTest);
                        kTest.Koan = _db.Koans.First(x => x.Name == kTest.Koan.Name && x.TeacherId == Teacher.Id);
                    }

                }


                Course.Teacher = Teacher;
                _db.Courses.Add(Course);

            }
            _db.SaveChanges();
            Course = new Course();
            //modules = new List<Module>();



        }
        catch (Exception exp)
        {
            mesError = exp.Message;
        }

    }

    private string GetVisibleClass(Module module)
    {
        if (listIdModuleInvisible.Contains(module))
            return "display: none;";
        else
            return "";
    }



    private void AddEmptyModul()
    {
        KoanInTest koanInTest = new()
            {
                Koan = new Koan() { Description = "4" }
            };

        Test test = new();
        test.KoanInTests.Add(koanInTest);

        Module module = new()
            {
                Test = test
            };

        KoanInModule koanInModule = new()
            {
                Koan = new Koan() { Description = "4" }
            };
        module.KoanInModules.Add(koanInModule);

        Course.Modules.Add(module);
        //StateHasChanged();
    }

    private void AddEmptyKoanInModule(Module module)
    {
        KoanInModule koanInModule = new()
            {
                Koan = new Koan() { Description = "4" }
            };
        module.KoanInModules.Add(koanInModule);
        //StateHasChanged();
    }

    private void AddEmptyKoanInTest(Module module)
    {
        KoanInTest koanInTest = new()
            {
                Koan = new Koan() { Description = "4" }
            };
        module.Test.KoanInTests.Add(koanInTest);
        //StateHasChanged();
    }

    private void ChangeVisibleModule(Module module)
    {
        if (listIdModuleInvisible.Contains(module))
            listIdModuleInvisible.Remove(module);
        else
            listIdModuleInvisible.Add(module);
    }


}
