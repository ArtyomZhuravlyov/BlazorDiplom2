@using Microsoft.EntityFrameworkCore
@inject DB _db;
@inject UserManager<AspNetUsers> _userManager;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<h3>ListCourses</h3>
@if(isLoaded)
{
    @if(showList)
{
    @if(courses!=null)
    {
        
    
    <div>
    @foreach(var item in courses)
    {
          <div>@item.Name</div>
          <button @onclick="(()=>OpenChanged(item))">Изменить</button>
          <button class="btn btn-danger" @onclick="(()=>Delete(item))">Удалить</button>
    }
  
        </div>
    }
    else
    {
       <div> Loading   </div>
    }
}
else
{
    <CreateEditCoursesComp ShowList="ShowList" Course="editCourse" Teacher="thisTeacher"></CreateEditCoursesComp>
}
}


@code {
    IEnumerable<Course> courses;
    Course editCourse;
    bool showList = true;
    Teacher thisTeacher;
        bool isLoaded;


    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var aspUser = await _userManager.GetUserAsync(user);
        thisTeacher = _db.Teachers.Include(x => x.AspNetUser)
        .Include(x=>x.Courses)
            .ThenInclude(x=>x.Modules.OrderBy(p=>p.Priority))
                .ThenInclude(x=>x.KoanInModules.OrderBy(p=>p.Priority))
                    //.ThenInclude(x=>x.Koan)  //здесь скорее всего для названия
        .Include(x=>x.Courses)
            .ThenInclude(x=>x.Modules.OrderBy(p=>p.Priority))
                .ThenInclude(x=>x.Test)
                    .ThenInclude(x=>x.KoanInTests.OrderBy(p=>p.Priority))
                        //.ThenInclude(x=>x.Koan) //нужны ли коаны?
        .Include(x=>x.Koans)
        .First(x => x.AspNetUser == aspUser);
        courses = thisTeacher.Courses;
                isLoaded = true;
    }

    private void Delete(Course delCourse)
    {
        thisTeacher.Courses.Remove(delCourse);
        //_db.Koans.Remove(delKoan);//если нет каскадного удаления и проверить для модуля
        
        _db.SaveChanges();
    }

    private void ShowList()
    {
        showList = true;
    }

    private void OpenChanged(Course eCourse)
    {
        editCourse = eCourse;
        showList = false;
       
    }


}
