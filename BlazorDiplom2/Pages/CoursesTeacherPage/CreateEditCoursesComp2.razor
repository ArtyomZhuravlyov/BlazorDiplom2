@using Microsoft.EntityFrameworkCore
@inject DB _db;
@inject UserManager<AspNetUsers> _userManager;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<h3>CreateEditCourse</h3>
@if (edit)
{
    <button @onclick="ShowList">Назад</button>
}
<div>@mesError</div>

<div>
    <label>Название</label>
    <input type="text" @bind="courseForm.Name" />
    <label>Описание</label>
    <input type="text" @bind="courseForm.Description" />


    @foreach (var modulF in courseForm.ModuleForms)
    {
        <label>Модуль @courseForm.ModuleForms.IndexOf(modulF)</label>
        <button @onclick="(()=>courseForm.ModuleForms.Remove(modulF))">X</button>
        if (listIdModuleInvisible.Contains(modulF))
        {
            <button @onclick="(()=>ChangeVisibleModule(modulF))">раскрыть</button>
        }
        else
        {
            <button @onclick="(()=>ChangeVisibleModule(modulF))">скрыть</button>
        }

        <div style="@GetVisibleClass(modulF)">
            <label>Название модуля</label>
            <input type="text" @bind="modulF.Name" />

              @for(int i = 0;i< modulF.ListKoanInModule.Count; i++)
            {
                var locI = i;
               <label>Коан @locI</label>
                <select @bind="modulF.ListKoanInModule[locI]">
                    @if (modulF.ListKoanInModule[locI] == null)
                    {
                        <option selected value="-1">Выберите коан</option>
                    }

                    @foreach (var item in Teacher.Koans)
                    {
                        @if (String.Equals(item.Name, modulF.ListKoanInModule[locI],
                       StringComparison.OrdinalIgnoreCase))
                        {
                            <option selected value="@modulF.ListKoanInModule[locI]">@modulF.ListKoanInModule[locI]</option>
                        }
                        else
                        {
                            <option value="@item.Name">@item.Name</option>
                        }

                    }

                </select>
                <button @onclick="()=>modulF.ListKoanInModule.Remove(modulF.ListKoanInModule[locI])">X</button>
            }

            <button @onclick="()=>modulF.ListKoanInModule.Add(null)">Добавить ещё один коан в модуль</button>
        </div>
        <div>
            <label>Тест</label>
            <label>Время</label>
            <input type="time" @bind="modulF.Time" />
            <label>Проходной балл</label>
            <input type="number" @bind="modulF.MinScore" />
            @for(int i = 0;i< modulF.ListKoanInTest.Count; i++)
            {
                var locI = i;
                <label>Коан</label>
                <select @bind="modulF.ListKoanInTest[locI]">
                    @if (modulF.ListKoanInTest[locI] == null)
                    {
                        <option selected value="-1">Выберите коан</option>
                    }

                    @foreach (var item in Teacher.Koans)
                    {
                        @if (String.Equals(item.Name, modulF.ListKoanInTest[locI],
                       StringComparison.OrdinalIgnoreCase))
                        {
                            <option selected value="@modulF.ListKoanInTest[locI]">@modulF.ListKoanInTest[locI]</option>
                        }
                        else
                        {
                            <option value="@item.Name">@item.Name</option>
                        }

                    }
                </select>
                <button @onclick="()=>modulF.ListKoanInTest.Remove(modulF.ListKoanInTest[locI])">X</button>
            }
            
            <button @onclick="()=>modulF.ListKoanInTest.Add(null)">Добавить ещё один коан в тест</button>
        </div>
    }
    <button @onclick="()=>courseForm.ModuleForms.Add(new ModuleForm())">Добавить модуль</button>

    <button type="button" @onclick="OnValidSubmitAsync">@messageBtn</button>
</div>



@code {

    [Parameter] public Course Course { get; set; }

    [Parameter] public EventCallback ShowList { get; set; }

    [Parameter] public Teacher Teacher { get; set; }


    CourseForm courseForm;


    List<ModuleForm> listIdModuleInvisible = new();

    private bool edit;

    private string messageBtn;
    private string mesError = "";

    protected override async Task OnInitializedAsync()
    {
        edit = Course.Id != 0;
        messageBtn = edit ? "Изменить" : "Добавить";
        if (!edit)
        {
            var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var user = authstate.User;
            var aspUser = await _userManager.GetUserAsync(user);
            Teacher = _db.Teachers.Include(x => x.AspNetUser).Include(x => x.Koans).First(x => x.AspNetUser == aspUser);
        }
        courseForm = new()
            {
                Name = Course.Name,
                Description = Course.Description,
                Id = Course.Id,
                ModuleForms = GetModulesForm(Course.Modules)

            };


            //  modules = Course.Modules.ToList();
        // koansName = new List<Koan>(){", ""}
        //koansName = _db.Koans.Where(x => x.TeacherId == Teacher.Id).Select(x => x.Name).ToList(); // Teacher.Koans.Select(x=>x.Name).ToList();
        //isLoaded = true;
    }

    private void AddKoan(List<string> ListKoan)
    {
        //ListKoan.Add("Выберите коан");
        ListKoan.Add(null);
    }

    private List<ModuleForm> GetModulesForm(List<Module> modules)
    {
        List<ModuleForm> moduleForms = new List<ModuleForm>();
        foreach (var item in modules)
        {
            ModuleForm moduleForm = new()
                {
                    Id = item.Id,
                    Name = item.Name,
                    Priority = item.Priority,
                    MinScore = item.Test.MinScore,
                    Time = item.Test.Time,
                };

            foreach (var KoanInModule in item.KoanInModules)
            {
                moduleForm.ListKoanInModule.Add(KoanInModule.Koan.Name);
            }

            foreach (var KoanInTest in item.Test.KoanInTests)
            {
                moduleForm.ListKoanInTest.Add(KoanInTest.Koan.Name);
            }
            moduleForms.Add(moduleForm);
        }

        return moduleForms;
    }

    private async Task OnValidSubmitAsync()
    {
        var transaction = _db.Database.BeginTransaction();
        try
        {
            //if (edit) //если изменяем
            //{

            //    foreach (var module in courseForm.ModuleForms)
            //    {
            //        //module.Test.Time = Convert.ToDateTime(module.Test.Time.TimeOfDay.ToString());
            //        module.Priority = courseForm.ModuleForms.IndexOf(module);
                    

            //        foreach (var kModule in module.ListKoanInModule)
            //        {
            //            _db.KoanInModules.First(x=>x.Id)
            //            kModule.Priority = module.KoanInModules.IndexOf(kModule);
            //            kModule.Koan = _db.Koans.First(x => x.Name == kModule.Koan.Name && x.TeacherId == Teacher.Id);
            //            var km = _db.KoanInModules.Attach(kModule);
            //            if (km == null)
            //                _db.KoanInModules.Add(kModule);
            //            else
            //            {
            //                km.State = Microsoft.EntityFrameworkCore.EntityState.Modified;
            //                _db.SaveChanges();
            //            }
            //        }
            //        //_db.KoanInModules.AddRange(module.KoanInModules);

            //        foreach (var kTest in module.Test.KoanInTests)
            //        {
            //            kTest.Priority = module.Test.KoanInTests.IndexOf(kTest);
            //            kTest.Koan = _db.Koans.First(x => x.Name == kTest.Koan.Name && x.TeacherId == Teacher.Id);

            //            var kt = _db.KoanInTests.Attach(kTest);
            //            if (kt == null)
            //                _db.KoanInTests.Add(kTest);
            //            else
            //            {
            //                kt.State = Microsoft.EntityFrameworkCore.EntityState.Modified;
            //                _db.SaveChanges();
            //            }
            //        }
            //        //_db.KoanInTests.AddRange(module.Test.KoanInTests);


            //        var m = _db.Modules.Attach(module);
            //        if (m == null)
            //            _db.Modules.Add(module);
            //        else
            //        {
            //            m.State = Microsoft.EntityFrameworkCore.EntityState.Modified;
            //            _db.SaveChanges();
            //        }
            //    }


            //    Course.Modules = modules;

            //    var course = _db.Courses.Attach(Course);
            //    course.State = Microsoft.EntityFrameworkCore.EntityState.Modified;

            //}
            //else //если добавляем
            //{
            //    foreach (var module in modules)
            //    {
            //        //module.Test.Time = Convert.ToDateTime(module.Test.Time.TimeOfDay);
            //        module.Priority = modules.IndexOf(module);

            //        foreach (var kModule in module.KoanInModules)
            //        {
            //            kModule.Priority = module.KoanInModules.IndexOf(kModule);
            //            kModule.Koan = _db.Koans.First(x => x.Name == kModule.Koan.Name && x.TeacherId == Teacher.Id);
            //        }
            //        _db.KoanInModules.AddRange(module.KoanInModules);

            //        foreach (var kTest in module.Test.KoanInTests)
            //        {
            //            kTest.Priority = module.Test.KoanInTests.IndexOf(kTest);
            //            kTest.Koan = _db.Koans.First(x => x.Name == kTest.Koan.Name && x.TeacherId == Teacher.Id);
            //        }
            //        _db.KoanInTests.AddRange(module.Test.KoanInTests);

            //    }
            //    _db.Modules.AddRange(modules);

            //    Course.Modules = modules;

            //    _db.Courses.Add(Course);
            //}
            _db.SaveChanges();
            courseForm = new CourseForm();
        
            transaction.Commit();
            // Koan = new();
        }
        catch (Exception exp)
        {
            mesError = exp.Message;
            transaction.Rollback();
        }

    }

    private string GetVisibleClass(ModuleForm module)
    {
        if (listIdModuleInvisible.Contains(module))
            return "display: none;";
        else
            return "";
    }

    private void DeleteModule(ModuleForm module)
    {
        if (listIdModuleInvisible.Contains(module))
            listIdModuleInvisible.Remove(module);
        else
            listIdModuleInvisible.Add(module);
    }






    private void ChangeVisibleModule(ModuleForm module)
    {
        if (listIdModuleInvisible.Contains(module))
            listIdModuleInvisible.Remove(module);
        else
            listIdModuleInvisible.Add(module);
    }


}
