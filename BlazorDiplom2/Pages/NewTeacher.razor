@using BlazorDiplom2.ModelForm
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;

@inject RoleManager<IdentityRole> _RoleManager;
@inject UserManager<AspNetUsers> _userManager;
@inject IUserStore<AspNetUsers> _userStore;
@*@inject IUserEmailStore<AspNetUsers> _emailStore;*@
@inject DB _db;

<h3>NewStudent</h3>
<div>@mes</div>
<EditForm Model="teacherModelForm" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />
    <label>teacherModelForm.Email</label>
    <InputText class="form-control" @bind-Value="teacherModelForm.Email"></InputText>

    <label>teacherModelForm.Password</label>
    <InputText class="form-control" @bind-Value="teacherModelForm.Password"></InputText>

    <label>teacherModelForm.FirstName</label>
    <InputText class="form-control" @bind-Value="teacherModelForm.FirstName"></InputText>

    <label>teacherModelForm.LastName</label>
    <InputText class="form-control" @bind-Value="teacherModelForm.LastName"></InputText>
    <button class="btn btn-primary">Добавить</button>
</EditForm>



@if (teachers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var teacher in teachers)
    {

        <div>
            @teacher.FirstName
        </div>
        <button @onclick="() =>OpenChange(teacher)">Изменить</button>
        <button class="btn btn-danger" @onclick="(()=>DelTeacher(teacher))">Удалить</button>
    }

}
@if (displayConfirm)
{
    <div class="modal-backdrop show">
    </div>

    <div class="modal fade show" id="exampleModal" tabindex="-1" role="dialog"
     aria-labelledby="exampleModel" aria-hidden="true" style="display: block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button @onclick="onCancel" type="button" class="close">&times;</button>
                </div>
                <div class="modal-body">
                    @ChildContent
                </div>
                <div class="modal-footer">
                    <button @onclick="onConfirm" type="button" class="btn btn-danger"> Delete</button>
                    <button @onclick="onCancel" type="button" class="btn btn-danger"> Cancel</button>
                </div>
            </div>
        </div>

    </div>
}

@code {

    ////////////
    bool displayConfirm = false;

    [Parameter] public string Title { get; set; } = "Confirm";
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback onConfirm { get; set; }
    [Parameter] public EventCallback onCancel { get; set; }

    public void OpenChange(Teacher changeTeacher)
    {
        displayConfirm = true;
    }
    public void Hide() => displayConfirm = false;
    //////////

    TeacherModelForm teacherModelForm = new();

    string mes = "";

    bool shouldRender = true;

    IEnumerable<Teacher> teachers;

    protected override async Task OnInitializedAsync() => teachers = await _db.GetTeachersAsync();


    private async Task OnValidSubmitAsync()
    {
        shouldRender = false;
        if ((await _userManager.FindByNameAsync(teacherModelForm.Email)) != null)
        {
            mes = "Пользователь с таким именем уже существует";
            shouldRender = true;
            return;
        }
        mes = "";

        Teacher teacher = new()
            {
                FirstName = teacherModelForm.FirstName,
                LastName = teacherModelForm.LastName,
            };

        _db.Teachers.Add(teacher);

        var user = Activator.CreateInstance<AspNetUsers>();
        await _userStore.SetUserNameAsync(user, teacherModelForm.Email, CancellationToken.None);
        user.Teacher = teacher;
        await _userManager.CreateAsync(user, teacherModelForm.Password);

        await ((IUserEmailStore<AspNetUsers>)_userStore).SetEmailAsync(user, teacherModelForm.Email, CancellationToken.None);

        await _userManager.AddToRoleAsync(user, "Teachers" /*Enums.Roles.Student.ToString()*/);

        teacherModelForm = new TeacherModelForm();
        //_db.SaveChanges();
        shouldRender = true;
        //_userManager.AddToRoleAsync(user,"Students" /*Enums.Roles.Student.ToString()*/);


    }

    protected override bool ShouldRender()
    {
        return shouldRender;
    }



    private async Task<bool> DelTeacher(Teacher delTeacher)
    {
        try
        {
            shouldRender = false;
            await _userManager.DeleteAsync(delTeacher.AspNetUser);
            shouldRender = true;

            return true;
        }
        catch (Exception exp)
        {
            return false;
        }
    }
}
