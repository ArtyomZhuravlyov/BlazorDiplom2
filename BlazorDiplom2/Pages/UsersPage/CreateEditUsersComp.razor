@using BlazorDiplom2.ModelForm
@using Microsoft.EntityFrameworkCore
@inject UserManager<AspNetUsers> _userManager;
@inject IUserStore<AspNetUsers> _userStore;
@inject DB _db;
<div class="item long_item">
    <div class="main_name">Роль пользователя</div>
    @if (_edit)
    {
        <button @onclick="ShowList">Назад</button>
        <select disabled > @*@onchange="@ChangeRole"*@
            @if (UserModelForm is StudentModelForm)
            {
                <option selected value="@Constants.ROLE_STUDENT">@Constants.ROLE_STUDENT</option>
            }
            else
            {
                <option selected value="@Constants.ROLE_TEACHER">@Constants.ROLE_TEACHER</option>
            }
        </select>
    }
    else
    {
        <select @onchange="@ChangeRole">
            <option selected value="@Constants.ROLE_STUDENT">@Constants.ROLE_STUDENT</option>
            <option value="@Constants.ROLE_TEACHER">@Constants.ROLE_TEACHER</option>
        </select>
    }
  
</div>

<div>@_mes</div>
@if (UserModelForm is TeacherModelForm TeacherModelForm)
{
    <EditForm class="new" Model="TeacherModelForm" OnValidSubmit="OnValidSubmitAsync">
        <DataAnnotationsValidator />
        <div class="item">
            <div class="main_name">Фамилия</div>
            <InputText @bind-Value="TeacherModelForm.LastName"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Имя</div>
            <InputText @bind-Value="TeacherModelForm.FirstName"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Отчество</div>
            <InputText @bind-Value="TeacherModelForm.FatherName"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Email</div>
            <InputText @bind-Value="TeacherModelForm.Email"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Имя пользователя</div>
            <InputText @bind-Value="TeacherModelForm.UserName"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Пароль</div>
            <InputText @bind-Value="TeacherModelForm.Password"></InputText>
        </div>

        <div class="item long_item long_select">
            <div class="main_name">Учебное заведение</div>
            <InputSelect ValueExpression="@(()=>TeacherModelForm.EducationalInstitution)"
                     Value="@TeacherModelForm.EducationalInstitution"
                     ValueChanged="@((string value) => ChangedEduc(value))">

                @if (TeacherModelForm.EducationalInstitution == null)
            {
                <option selected value="-1">Выберите учебное заведение</option>
            }

            @foreach (var item in educationalInstitutions)
            {
                @if (String.Equals(item.FullName, TeacherModelForm.EducationalInstitution,
               StringComparison.OrdinalIgnoreCase))
                {
                    <option selected value="@TeacherModelForm.EducationalInstitution">@TeacherModelForm.EducationalInstitution</option>
                }
                else
                {
                    <option value="@item.FullName">@item.FullName</option>
                }

            }
        </InputSelect>
    </div>



    <div class="item long_item short_select">
        <div class="main_name">Добавить группу</div>
        @* <select  @onchange="@SelectAndAddGroup"> *@ @*value="-1"*@
        <select @onchange="@SelectAndAddGroup">
            <option selected value="-1">Выберите группу</option>
            @foreach (var item in _groupsTeacher)
                {
                    <option value="@item.Name">@item.Name</option>
                }

            </select>
        </div>
        @if(TeacherModelForm.Groups.Count > 0)
        {
            <div class="item long_item">
            <div class="groups_with_teacher">
                <div class="main_name">Привязанные группы</div>
                @foreach (var item in TeacherModelForm.Groups)
                {
                    <div class="group_with_teacher">
                        <div class="group_with_teacher_name">
                            @item
                        </div>
                        <div @onclick="()=>DelGroupTeacher(item)" class="del_group_with_teacher"><img src="img\del.png" alt=""></div>
                    </div>
                }
            </div>
        </div>
        }
        

        <button class="save_btn">@_messageBtn</button>
    </EditForm>
}
else if (UserModelForm is StudentModelForm StudentModelForm)
{
    <EditForm class="new" Model="StudentModelForm" OnValidSubmit="OnValidSubmitAsync">
        <DataAnnotationsValidator />
        <div class="item">
            <div class="main_name">Фамилия</div>
            <InputText @bind-Value="StudentModelForm.LastName"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Имя</div>
            <InputText @bind-Value="StudentModelForm.FirstName"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Отчество</div>
            <InputText @bind-Value="StudentModelForm.FatherName"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Email</div>
            <InputText @bind-Value="StudentModelForm.Email"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Имя пользователя</div>
            <InputText @bind-Value="StudentModelForm.UserName"></InputText>
        </div>
        <div class="item">
            <div class="main_name">Пароль</div>
            <InputText @bind-Value="StudentModelForm.Password"></InputText>
        </div>

        @*<option selected value="@StudentModelForm.EducationalInstitution">@StudentModelForm.EducationalInstitution</option>*@

        <div class="item long_select">
            <div class="main_name">Учебное заведение</div>
            <InputSelect ValueExpression="@(()=>StudentModelForm.EducationalInstitution)"
                     Value="@StudentModelForm.EducationalInstitution"
                     ValueChanged="@((string value) => ChangedEduc(value))">

                @if (StudentModelForm.EducationalInstitution == null)
            {
                <option selected value="-1">Выберите учебное заведение</option>
            }

            @foreach (var item in educationalInstitutions)
            {
                @if (String.Equals(item.FullName, StudentModelForm.EducationalInstitution,
               StringComparison.OrdinalIgnoreCase))
                {
                    <option selected value="@StudentModelForm.EducationalInstitution">@StudentModelForm.EducationalInstitution</option>
                }
                else
                {
                    <option value="@item.FullName">@item.FullName</option>
                }

            }
        </InputSelect>
    </div>


    <div class="item short_select">
        <div class="main_name">Группа</div>
        <InputSelect @bind-Value="StudentModelForm.Group">
            @if (StudentModelForm.Group == null)
                {
                <option selected value="-1">Выберите группу</option>
                }

            @foreach (var item in groups)
                {
                @if (String.Equals(item.Name, StudentModelForm.Group,
               StringComparison.OrdinalIgnoreCase))
                    {
                    <option selected value="@StudentModelForm.Group">@StudentModelForm.Group</option>
                    }
                    else
                    {
                    <option value="@item.Name">@item.Name</option>
                    }

                }
        </InputSelect>
    </div>

    <button class="save_btn">@_messageBtn</button>
</EditForm>
}


@code {
    [Parameter] public UserModelForm UserModelForm { get; set; }

    [Parameter] public EventCallback ShowList { get; set; }

    [Parameter] public EventCallback Refresh { get; set; }

    private string _selectRol = Constants.ROLE_STUDENT;

    private bool _edit;

    private string _messageBtn;


    string _mes = "";


    List<EducationalInstitution> educationalInstitutions = new();
    List<Group> groups = new();
    List<Group> _groupsTeacher = new(); // здесь группы удаляются и добавляются в зависимости от выбора

    protected override void OnInitialized()
    {
        _edit = UserModelForm.IdUser != null; //!= "0";
        _messageBtn = _edit ? Constants.BTN_CHANGE : Constants.BTN_ADD;
        educationalInstitutions = _db.EducationalInstitutions.Include(x => x.Groups).ToList();

        //if (UserModelForm is StudentModelForm studentModelForm /*&& studentModelForm.Group != null*/)
        //    groups = educationalInstitutions.First(x => x.FullName == studentModelForm.EducationalInstitution).Groups.ToList();
        //else if (UserModelForm is TeacherModelForm teacherModelForm1)
        //    ;
        if (_edit)
        {
            groups = educationalInstitutions.FirstOrDefault(x => x.FullName.Equals(UserModelForm.EducationalInstitution)).Groups.ToList();
            _groupsTeacher = new(groups);

            if (UserModelForm is TeacherModelForm teacherModelForm && teacherModelForm.Groups?.Count > 0)
            {
                foreach (var item in teacherModelForm.Groups)
                    _groupsTeacher.RemoveAll(x => x.Name.Equals(item));
            }
        }






    }

    private void ChangeRole(ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value.ToString().Equals(Constants.ROLE_STUDENT))
            UserModelForm = new StudentModelForm();
        else
            UserModelForm = new TeacherModelForm();
    }

    private void DelGroupTeacher(string groupName)
    {
        var teacherModelForm = UserModelForm as TeacherModelForm;
        teacherModelForm.Groups.Remove(groupName);
        _groupsTeacher.Add(groups.First(x => x.Name.Equals(groupName)));
    }

    private void SelectAndAddGroup(ChangeEventArgs eventArgs/*Group group*/)
    {
        string groupName = eventArgs.Value.ToString();
        if (groupName.Equals("-1"))
            return;
        var teacherModelForm = UserModelForm as TeacherModelForm;
        teacherModelForm.Groups.Add(groupName);
        _groupsTeacher.Remove(groups.First(x => x.Name.Equals(groupName)));

        //var teacherModelForm = UserModelForm as TeacherModelForm;
        //teacherModelForm.Groups.Add(group.Name);
        //_groupsTeacher.Remove(group);
    }

    private void ChangedEduc(string education)
    {
        // Assign the selected value to the Model
        UserModelForm.EducationalInstitution = education;
        //groups = _db.Groups.Include(x => x.EducationalInstitution).Where(x => x.EducationalInstitution.Id.ToString() == value).ToList();
        groups = educationalInstitutions.First(x => x.FullName == UserModelForm.EducationalInstitution).Groups.ToList();
        _groupsTeacher = new(groups);
        if (UserModelForm is TeacherModelForm teacherModelForm)
            teacherModelForm.Groups.Clear();
    }

    private async Task OnValidSubmitAsync()
    {

        var userRepeat = (await _userManager.FindByNameAsync(UserModelForm.UserName));

        if (userRepeat != null && userRepeat.Id != UserModelForm.IdUser) // userRepeat.Id != UserModelForm.IdUser это важно при редактированнии пользователя
        {
            _mes = "Пользователь с таким именем уже существует";
            return;
        }

        userRepeat = (await _userManager.FindByEmailAsync(UserModelForm.Email));

        if (userRepeat != null && userRepeat.Id != UserModelForm.IdUser)
        {
            _mes = "Пользователь с такой почтой уже существует";
            return;
        }

        _mes = "";

        if (_edit)
            await EditUserAsync();
        else
            await CreateUserAsync();

        await Refresh.InvokeAsync();
    }


    private async Task EditUserAsync()
    {
        var editUser = await _userManager.FindByIdAsync(UserModelForm.IdUser);

        await _userStore.SetUserNameAsync(editUser, UserModelForm.UserName, CancellationToken.None);
        var token = await _userManager.GeneratePasswordResetTokenAsync(editUser);
        await _userManager.ResetPasswordAsync(editUser, token, UserModelForm.Password);
        await ((IUserEmailStore<AspNetUsers>)_userStore).SetEmailAsync(editUser, UserModelForm.Email, CancellationToken.None);

        if (UserModelForm is StudentModelForm studentModelForm1)
        {
            editUser.Student.FirstName = UserModelForm.FirstName;
            editUser.Student.LastName = UserModelForm.LastName;
            editUser.Student.FatherName = UserModelForm.FatherName;
            //editUser.Student.Group = groups.First(x => x.Id.ToString() == studentModelForm1.Group);
            editUser.Student.Group = groups.First(x => x.Name == studentModelForm1.Group);
            UserModelForm = new StudentModelForm();
            groups.Clear();
        }
        else
        {
            var grs = new List<Group>();
            foreach (var item in ((TeacherModelForm)UserModelForm).Groups)
            {
                grs.Add(groups.First(x => x.Name.Equals(item)));
            }

            editUser.Teacher.FirstName = UserModelForm.FirstName;
            editUser.Teacher.LastName = UserModelForm.LastName;
            editUser.Teacher.FatherName = UserModelForm.FatherName;
            editUser.Teacher.Groups = grs;
            UserModelForm = new TeacherModelForm();
        }


        var r = await _userManager.UpdateAsync(editUser);
        if (r.Errors.Count() > 0)
        {
            _mes = r.Errors.ElementAt(0).Description;
            ////transaction.Rollback();
            //return;
        }
    }


    private async Task CreateUserAsync()
    {
        //using var transaction = _db.Database.BeginTransaction();
        var user = Activator.CreateInstance<AspNetUsers>();
        await _userStore.SetUserNameAsync(user, UserModelForm.UserName, CancellationToken.None);
        await ((IUserEmailStore<AspNetUsers>)_userStore).SetEmailAsync(user, UserModelForm.Email, CancellationToken.None);


        var r = await _userManager.CreateAsync(user, UserModelForm.Password);
        if (r.Errors.Count() > 0)
        {
            _mes = r.Errors.ElementAt(0).Description;
            //transaction.Rollback();
            return;
        }


        if (UserModelForm is StudentModelForm studentModelForm)
        {
            //var group = groups.First(x => x.Id.ToString() == studentModelForm.Group);
            var group = groups.First(x => x.Name == studentModelForm.Group);

            Student student = new()
                {
                    FirstName = studentModelForm.FirstName,
                    LastName = studentModelForm.LastName,
                    FatherName = studentModelForm.FatherName,
                    Group = group
                };

            _db.Students.Add(student);
            user.Student = student;

            await _userManager.AddToRoleAsync(user, "Students");
            //transaction.Commit();
            groups.Clear();
            UserModelForm = new StudentModelForm();
        }
        else
        {
            var teacherModelForm = UserModelForm as TeacherModelForm;

            var grs = new List<Group>();
            foreach (var item in teacherModelForm.Groups)
            {
                grs.Add(groups.First(x => x.Name.Equals(item)));
            }

            Teacher teacher = new()
                {
                    FirstName = teacherModelForm.FirstName,
                    LastName = teacherModelForm.LastName,
                    FatherName = teacherModelForm.FatherName,
                    Groups = grs
                };

            _db.Teachers.Add(teacher);
            user.Teacher = teacher;

            
            await _userManager.AddToRoleAsync(user, "Teachers" /*Enums.Roles.Student.ToString()*/);
            //transaction.Commit();
            groups.Clear();
            _groupsTeacher.Clear();
            UserModelForm = new TeacherModelForm();

        }
    }

}
