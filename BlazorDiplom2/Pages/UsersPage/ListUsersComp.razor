@using Microsoft.EntityFrameworkCore
@inject DB _db;
@inject UserManager<AspNetUsers> _userManager;


@if (_showList)
{
    <div class="filtr">
        <div class="filtr_item short_select">
            <div class="main_name">Роль пользователя</div>
            <select @bind="_selectRol">
                <option selected value="@Constants.ROLE_STUDENT">@Constants.ROLE_STUDENT</option>
                <option value="@Constants.ROLE_TEACHER">@Constants.ROLE_TEACHER</option>
            </select>
        </div>
    </div>

    @if (_teachers == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="table_admin">
            <table border="1">

                @if (_selectRol.Equals(Constants.ROLE_STUDENT))
                {
                    <tr>
                        <th>ФИО</th>
                        <th>Имя пользователя</th>
                        <th>Email</th>
                        <th>Учебное заведение</th>
                        <th>Группа</th>
                        <th></th>
                        <th></th>
                    </tr>

                    @foreach (var item in _students)
                    {
                        <tr>
                            <td class="nowrap">@($"{item.LastName } {item.FirstName} {item.FatherName}")</td>
                            <td class="nowrap">@item.AspNetUser.UserName</td>
                            <td class="nowrap">@item.AspNetUser.Email</td>
                            <td class="nowrap">@item.Group.EducationalInstitution.ShortName</td>
                            <td class="nowrap">@item.Group.Name</td>
                            <td>
                                <div class="edit_delete_item" @onclick="(()=>OpenChanged(item))"><img src="img\edit.png" alt=""></div>
                            </td>
                            <td>
                                <div class="edit_delete_item" @onclick="(()=>Delete(item.AspNetUser))"><img src="img\delete.png" alt=""></div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <th>ФИО</th>
                        <th>Имя пользователя</th>
                        <th>Email</th>
                        <th>Учебное заведение</th>
                        <th>Группы</th>
                        <th></th>
                        <th></th>
                    </tr>

                    @foreach (var item in _teachers)
                    {

                        <tr>
                            <td class="nowrap">@($"{item.LastName } {item.FirstName} {item.FatherName}")</td>
                            <td class="nowrap">@item.AspNetUser.UserName</td>
                            <td class="nowrap">@item.AspNetUser.Email</td>
                            @if (item.Groups.Count > 0)
                            {
                                <td class="nowrap">@item.Groups[0].EducationalInstitution.ShortName</td>
                            }
                            else
                            {
                                <td class="nowrap">@string.Empty</td>
                            }
                            <td class="nowrap">
                                @foreach (var gr in item.Groups)
                                {
                                    @(gr.Name + " ")
                                }
                            </td>
                            <td>
                                <div class="edit_delete_item" @onclick="(()=>OpenChanged(item))"><img src="img\edit.png" alt=""></div>
                            </td>
                            <td>
                                <div class="edit_delete_item" @onclick="(()=>Delete(item.AspNetUser))"><img src="img\delete.png" alt=""></div>
                            </td>
                        </tr>
                    }
                }
            </table>
        </div>
    }
}
else
{
    <CreateEditUsersComp ShowList="ShowList" UserModelForm="_userModelForm"></CreateEditUsersComp>
}

@code {
    private IEnumerable<Student> _students;
    private IEnumerable<Teacher> _teachers;
     
    private UserModelForm _userModelForm;
    private bool _shouldRender = true;
    private bool _showList = true;
    private string _selectRol = Constants.ROLE_STUDENT;

    //protected override async Task OnInitializedAsync() =>  students2 = await _db.GetStudentsAsync();

    protected override async Task OnInitializedAsync()
    {

        _students = await Task.FromResult(_db.Students
        .Include(x => x.AspNetUser)
        .Include(x => x.Group)
            .ThenInclude(x => x.EducationalInstitution));

        _teachers = await Task.FromResult(_db.Teachers
        .Include(x => x.AspNetUser)
        .Include(x => x.Groups)
            .ThenInclude(x => x.EducationalInstitution));
        //teachers = await _db.GetTeachersAsync();
    }


    //private void ChangeRole()
    //{

    //}

    private void Delete(EducationalInstitution educationalInstitution)
    {
        _db.EducationalInstitutions.Remove(educationalInstitution);
        _db.Groups.RemoveRange(_db.Groups.Include(x => x.EducationalInstitution)
        .Where(x => x.EducationalInstitutionId == educationalInstitution.Id));//если нет каскадного удаления
        _db.SaveChanges();
    }

    private void ShowList()
    {
        _showList = true;
    }

    private void OpenChanged(Object user)
    {
        //UserModelForm userModelForm = new UserModelForm();
        //var a = (StudentModelForm)userModelForm;

        if (user is Student student)
        {
            _userModelForm = new StudentModelForm()
                {
                    FirstName = student.FirstName,
                    LastName = student.LastName,
                    FatherName = student.FatherName,
                    Group = student.Group.Name,
                    Email = student.AspNetUser.Email,
                    UserName = student.AspNetUser.UserName,
                    IdUser = student.AspNetUsersId,
                    EducationalInstitution = student.Group.EducationalInstitution.FullName
                };
        }
        else
        {
            var teacher = user as Teacher;
            _userModelForm = new TeacherModelForm()
                {
                    FirstName = teacher.FirstName,
                    LastName = teacher.LastName,
                    FatherName = teacher.FatherName,
                    Email = teacher.AspNetUser.Email,
                    UserName = teacher.AspNetUser.UserName,
                    IdUser = teacher.AspNetUsersId,
                    Groups = teacher.Groups.Select(x=>x.Name).ToList(),
                    EducationalInstitution = teacher.Groups.Count>0 ? teacher.Groups[0].EducationalInstitution.FullName : null
                };
        }
        _showList = false;

        //<CreateEditEducationalInstitutionComp EducationalInstitution="educationalInstitution"></CreateEditEducationalInstitutionComp>
    }

    private async Task Delete(AspNetUsers delUser)
    {
        _shouldRender = false;
        await _userManager.DeleteAsync(delUser);
        _shouldRender = true;
    }

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }
}
