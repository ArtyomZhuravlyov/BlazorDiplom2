@using BlazorDiplom2.ModelForm
@inject RoleManager<IdentityRole> _RoleManager;
@inject UserManager<AspNetUsers> _userManager;
@inject IUserStore<AspNetUsers> _userStore;
@inject DB _db;



<div class="modal-backdrop show">
</div>

<div>@mes</div>
@if (CurrentRole == Enums.Roles.Teacher)
{
    <div class="modal fade show" id="exampleModal" tabindex="-1" role="dialog"
     aria-labelledby="exampleModel" aria-hidden="true" style="display: block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <EditForm Model="TeacherModelForm" OnValidSubmit="OnValidSubmitTeacherAsync">
                    <DataAnnotationsValidator />
                    <label>teacherModelForm.UserName</label>
                    <InputText class="form-control" @bind-Value="TeacherModelForm.UserName"></InputText>
                    <label>teacherModelForm.Email</label>
                    <InputText class="form-control" @bind-Value="TeacherModelForm.Email"></InputText>

                    <label>teacherModelForm.Password</label>
                    <InputText class="form-control" @bind-Value="TeacherModelForm.Password"></InputText>

                    <label>teacherModelForm.FirstName</label>
                    <InputText class="form-control" @bind-Value="TeacherModelForm.FirstName"></InputText>

                    <label>teacherModelForm.LastName</label>
                    <InputText class="form-control" @bind-Value="TeacherModelForm.LastName"></InputText>
                       <label>teacherModelForm.FatherName</label>
                    <InputText class="form-control" @bind-Value="TeacherModelForm.FatherName"></InputText>
                    <button class="btn btn-danger">Изменить</button>
                    <input type="button" value="Отменить" @onclick="OnCancel" class="btn btn-primary"></input>

                </EditForm>
            </div>
        </div>

    </div>
}
else
{
    <div class="modal fade show" id="exampleModal" tabindex="-1" role="dialog"
     aria-labelledby="exampleModel" aria-hidden="true" style="display: block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <EditForm Model="StudentModelForm" OnValidSubmit="OnValidSubmitStudentAsync">
                    <DataAnnotationsValidator />
                       <label>studentModelForm.UserName</label>
                    <InputText class="form-control" @bind-Value="StudentModelForm.UserName"></InputText>
                    <label>studentModelForm.Email</label>
                    <InputText class="form-control" @bind-Value="StudentModelForm.Email"></InputText>

                    <label>studentModelForm.Password</label>
                    <InputText class="form-control" @bind-Value="StudentModelForm.Password"></InputText>

                    <label>studentModelForm.FirstName</label>
                    <InputText class="form-control" @bind-Value="StudentModelForm.FirstName"></InputText>

                    <label>studentModelForm.LastName</label>
                    <InputText class="form-control" @bind-Value="StudentModelForm.LastName"></InputText>
                     <label>studentModelForm.FatherName</label>
                    <InputText class="form-control" @bind-Value="StudentModelForm.FatherName"></InputText>
                    <InputSelect class="form-control" @bind-Value="StudentModelForm.Group">


                        @foreach (var item in groups)
                        {
                            @if (item.Name == StudentModelForm.Group)
                            {
                                <option selected value="@item.Id.ToString()">@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Id.ToString()">@item.Name</option>
                            }
                        }
                </InputSelect>
                <button class="btn btn-danger">Изменить</button>
                <input type="button" value="Отменить" @onclick="OnCancel" class="btn btn-primary"></input>

            </EditForm>
        </div>
    </div>

</div>
}


@code {
    [Parameter] public Enums.Roles CurrentRole { get; set; }
    [Parameter] public TeacherModelForm TeacherModelForm { get; set; }
    [Parameter] public StudentModelForm StudentModelForm { get; set; }

    [Parameter] public EventCallback CloseModal { get; set; }
    [Parameter] public EventCallback Refresh { get; set; }

    string mes = "";


    List<Group> groups;

    protected override void OnInitialized() => groups = _db.Groups.ToList();

    private void OnCancel()
    {
        CloseModal.InvokeAsync();
    }

    private async Task OnValidSubmitTeacherAsync()
    {
        var userRepeat = (await _userManager.FindByNameAsync(TeacherModelForm.UserName));

        if (userRepeat != null && userRepeat.Id != TeacherModelForm.IdUser)
        {
            mes = "Пользователь с таким именем уже существует";

            return;
        }
        mes = "";

        var user = await _userManager.FindByIdAsync(TeacherModelForm.IdUser);

        await _userStore.SetUserNameAsync(user, TeacherModelForm.UserName, CancellationToken.None);
        var token = await _userManager.GeneratePasswordResetTokenAsync(user);
        await _userManager.ResetPasswordAsync(user, token, TeacherModelForm.Password);
        //await _userManager.CreateAsync(user, TeacherModelForm.Password);
        await ((IUserEmailStore<AspNetUsers>)_userStore).SetEmailAsync(user, TeacherModelForm.Email, CancellationToken.None);

        user.Teacher.FirstName = TeacherModelForm.FirstName;
        user.Teacher.LastName = TeacherModelForm.LastName;
         user.Teacher.FatherName = TeacherModelForm.FatherName;

        await _userManager.UpdateAsync(user);
        await Refresh.InvokeAsync();
        await CloseModal.InvokeAsync();
    }


    private async Task OnValidSubmitStudentAsync()
    {
        var userRepeat = (await _userManager.FindByNameAsync(StudentModelForm.UserName));
        if (userRepeat != null && userRepeat.Id != StudentModelForm.IdUser)
        {
            mes = "Пользователь с таким именем уже существует";
            return;
        }
        mes = "";
        var user = await _userManager.FindByIdAsync(StudentModelForm.IdUser);

        await _userStore.SetUserNameAsync(user, StudentModelForm.UserName, CancellationToken.None);
        var token = await _userManager.GeneratePasswordResetTokenAsync(user);
        await _userManager.ResetPasswordAsync(user, token, StudentModelForm.Password);
        //await _userManager.CreateAsync(user, TeacherModelForm.Password);
        await ((IUserEmailStore<AspNetUsers>)_userStore).SetEmailAsync(user, StudentModelForm.Email, CancellationToken.None);

        user.Student.FirstName = StudentModelForm.FirstName;
        user.Student.LastName = StudentModelForm.LastName;
          user.Student.FatherName = StudentModelForm.FatherName;
        user.Student.Group = groups.First(x => x.Id.ToString() == StudentModelForm.Group);
        await _userManager.UpdateAsync(user);
        await Refresh.InvokeAsync();
        await CloseModal.InvokeAsync();


    }


}
