@using BlazorDiplom2.ModelForm
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;

@inject RoleManager<IdentityRole> _RoleManager;
@inject UserManager<AspNetUsers> _userManager;
@inject IUserStore<AspNetUsers> _userStore;
@inject DB _db;

<h3>newTeacher2</h3>
<div>@mes</div>


<CreateUser TeacherModelForm="new TeacherModelForm()" CurrentRole="Enums.Roles.Teacher" Refresh="RefreshMe"></CreateUser>
@if(displayEditModal)
{
    <EditUser TeacherModelForm="changedTeacher" CurrentRole="Enums.Roles.Teacher" CloseModal="CloseModal" Refresh="RefreshMe"> </EditUser>    
}

@if (teachers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var teacher in teachers)
    {

        <div>
            @teacher.FirstName
        </div>
        <button @onclick="(()=>OpenChangedTeacher(teacher))">Изменить</button>
        <button class="btn btn-danger" @onclick="(()=>DelTeacher(teacher))">Удалить</button>
    }

}



@code {

    bool displayEditModal = false;
    TeacherModelForm changedTeacher = new();
    ////////////


    public void CloseModal()
    {
        displayEditModal = false;
    }
    //////////

    TeacherModelForm teacherModelForm = new();

    string mes = "";

    bool shouldRender = true;

    IEnumerable<Teacher> teachers;

    protected override async Task OnInitializedAsync() =>  teachers = await _db.GetTeachersAsync();


    private void RefreshMe()
    {
        StateHasChanged();
    }

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    private async Task OpenChangedTeacher(Teacher cTeacher)
    {
         changedTeacher.UserName = cTeacher.AspNetUser.UserName; 
        changedTeacher.Email = cTeacher.AspNetUser.Email; 
        changedTeacher.FirstName = cTeacher.FirstName;
        changedTeacher.LastName = cTeacher.LastName;
        changedTeacher.FatherName = cTeacher.FatherName;
        changedTeacher.IdUser = cTeacher.AspNetUsersId;
        changedTeacher.Password = "";
        displayEditModal = true;

    }

    private async Task<bool> DelTeacher(Teacher delTeacher)
    {
        try
        {
            shouldRender = false;
            await _userManager.DeleteAsync(delTeacher.AspNetUser);
            shouldRender = true;

            return true;
        }
        catch (Exception exp)
        {
            return false;
        }
    }
}
