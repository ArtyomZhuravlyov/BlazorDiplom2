@page "/ResultStudentsPage"
@attribute [Authorize(Roles = @Constants.ROLE_TEACHER_IDENTITY)]

@using Microsoft.EntityFrameworkCore
@inject DB _db;



    <div class="menu_info">
        @* <NavMenu></NavMenu>*@
        <div class="results_student">
            <div class="nav_top">
                <div class="nav_top_link">Результаты студентов</div>
            </div>
            <div class="filtr">
                <div class="filtr_item">
                    <div class="main_name">Курс</div>
                    <select @onchange="@ChangeCourse">
                        <option selected value="-1">Выберите курс</option>
                        @foreach (var item in _teacher.Courses)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
                <div class="filtr_item short_select">
                    <div class="main_name">Группа</div>
                    <select @onchange="@ChangeGroup">
                        <option selected value="-1">Выберите группу</option>
                        @foreach (var item in _groupsForSelect)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
                <div class="filtr_item">
                    <div class="main_name">Студент группы</div>
                    <select @onchange="@ChangeStudent">
                        <option selected value="-1">Выберите студента</option>
                        <option value="0">Все студенты</option>
                        @foreach (var item in _studentsForSelect)
                        {
                            <option value="@item.Id">@($"{item.LastName} {item.FirstName}")</option>
                        }
                    </select>
                </div>
            </div>
            @if (_students.Count > 0)
            {
                <div class="table_result">
                    <table border="1">
                        <tr>
                            <th rowspan="2">ФИО</th>
                            @for (int i = 1; i <= _modules.Count; i++)
                            {
                                int locI = i;
                                <th colspan="@(_modules[locI-1].KoanInModules.Count + 2)">Модуль @locI</th>
                            }
                        </tr>
                        <tr>
                            @foreach (var m in _modules)
                            {
                                @for (int i = 1; i <= m.KoanInModules.Count; i++)
                                {
                                    int locI = i;
                                    <th>@locI</th>
                                }
                                <th colspan="2">Тест</th>
                            }
                        </tr>
                        @foreach (var st in _students)
                        {
                            <tr>
                                <td class="nowrap">@($"{st.LastName} {st.FirstName} {st.FatherName}")</td>
                                @foreach (var m in _modules)
                                {
                                    @foreach (var kInM in m.KoanInModules)
                                    {
                                        @if (st.KoanInModules.Contains(kInM))
                                        {
                                            <td><img src="img\done.png" alt=""></td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                    }

                                    ResultTest resultTest = st.ResultTests.FirstOrDefault(x => x.Id == m.Test.Id);
                                    @if (resultTest != null)
                                    {
                                        @if (resultTest.IsPassed)
                                        {
                                            <td><img src="img\done.png" alt=""></td>
                                        }
                                        else
                                        {
                                            <td><img src="img\error.svg" alt=""></td>
                                        }
                                        <td>@(resultTest.ResultKoanTests.Count(x=>x.IsError == false)/resultTest.ResultKoanTests.Count())%</td>
                                    }
                                    else
                                    {
                                        <td></td>
                                        <td></td>
                                    }

                                }

                            </tr>
                        }
                    </table>
                </div>

                @if (_students.Count == 1)
                {

                    <div class="filtr_item">
                        <div class="main_name">Тест</div>
                        @*<select @onchange="@ChangeTestModule">
                            @foreach (var m in _modules)
                            {
                            <option value="@m.Id">Тест по модулю @_modules.IndexOf(m)</option>
                            }
                            </select>*@
                        <select @onchange="@ChangeTestModule">
                            @foreach (var rt in _resultTestForSelect)
                            {
                                <option value="@rt.Id">Тест по модулю @_modules.IndexOf(rt.Test.Module)</option>
                            }
                        </select>

                    </div>
                    @if (_test != null)
                    {
                        <div class="result_every_test">
                            <div class="info_items ">
                                <div class="info_item short ">
                                    <div class="info_item_title">
                                        <img src="img\time.png" alt=""> Время:
                                    </div>
                                    <div class="info_item_info">
                                        @($"{_test.Time.Minute} мин. {_test.Time.Second}") @*9 мин. 50 сек.*@
                                    </div>
                                </div>
                            </div>
                            <table border="1">
                                <tr>
                                    @* @for(int i=1;i<=_test.KoanInTests.Count;i++)
                                        {
                                        int locI = i;
                                        <th>@locI</th>
                                        }*@
                                    @for (int i = 1; i <= _resultTest.ResultKoanTests.Count; i++)
                                    {
                                        int locI = i;
                                        <th>@locI</th>
                                    }
                                </tr>
                                <tr>
                                    @foreach (var rKT in _resultTest.ResultKoanTests)
                                    {
                                        if (rKT.IsError)
                                        {
                                            <td><img src="img\error.svg" alt=""></td>
                                        }
                                        else
                                        {
                                            <td><img src="img\done.png" alt=""></td>
                                        }
                                    }
                                </tr>
                            </table>
                            <div class="results">
                                <div class="label">Коан</div>
                                <select @onchange="@ChangeResultTestKoan">
                                    @foreach (var rKT in _resultTest.ResultKoanTests)
                                    {
                                        <option value="@rKT.Id">Коан @(_resultTest.ResultKoanTests.IndexOf(rKT)+1)</option>
                                    }
                                </select>
                                <div class="result_texts">
                                    <div class="result_text">
                                        <div class="result_text_title">Ответ студента:</div>
                                        <div class="result_text_info">
                                            @_curResultKoanTest.Answer
                                        </div>
                                    </div>
                                    <hr />
                                    <div class="result_text">
                                        <div class="result_text_title">Ответ компилятора:</div>
                                        <div class="result_text_info">
                                            @_curResultKoanTest.Message
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }


                }
            }
        </div>
    </div>





@code {

    private List<Student> _studentsForSelect = new();
    private List<Group> _groupsForSelect = new();
    private Teacher _teacher;

    // Для таблицы
    private List<Student> _students = new();
    private List<Module> _modules = new();


    // Для теста
    private List<ResultTest> _resultTestForSelect = new();
    private Test _test;
    private Koan _koan;
    //private Student _curStudent;
    private Course _course;
    //private List<ResultKoanTest> _resultKoanTests = new();
    private ResultTest _resultTest;
    private ResultKoanTest _curResultKoanTest;

    protected override void OnInitialized()
    {

        _teacher = _db.Teachers
            .Include(x => x.AspNetUser)
            .Include(x => x.Courses)
                .ThenInclude(x => x.Groups)
                    .ThenInclude(x => x.Students)
                        .ThenInclude(x => x.ResultTests)
                            .ThenInclude(x => x.Test) // проверить потом нужно или нет
                                .ThenInclude(x => x.Module) // проверить потом нужно или нет
            .Include(x => x.Courses) // проверить потом нужно или нет или использовать только в ChangeStudent load
               .ThenInclude(x => x.Groups) // проверить потом нужно или нет
                   .ThenInclude(x => x.Students) // проверить потом нужно или нет
                       .ThenInclude(x => x.ResultTests) // проверить потом нужно или нет
                            .ThenInclude(x => x.ResultKoanTests) // проверить потом нужно или нет
                                .ThenInclude(x => x.KoanInTest) // проверить потом нужно или нет
                                    .ThenInclude(x => x.Koan) // проверить потом нужно или нет
            .Include(x => x.Courses)
                .ThenInclude(x => x.Modules.OrderBy(x => x.Priority))
                    .ThenInclude(x => x.KoanInModules.OrderBy(x => x.Priority))
            .Include(x => x.Courses)
                .ThenInclude(x => x.Modules.OrderBy(x => x.Priority))
                    .ThenInclude(x => x.Test)
                         .ThenInclude(x => x.KoanInTests.OrderBy(x => x.Priority))
            .Include(x => x.Groups)
            .First(x => x.AspNetUser == CurrentUser.User);

    }


    private void ChangeCourse(ChangeEventArgs eventArgs)
    {
        _groupsForSelect.Clear();
        _studentsForSelect.Clear();
        _modules.Clear();
        _students.Clear();

        var selCourseInt = Convert.ToInt32(eventArgs.Value);
        if (selCourseInt == -1)
            return;
        else
        {
            //_selCourse = _teacher.Courses.First(x => x.Id.Equals(selCourseInt));
            foreach (var item in _teacher.Groups)
            {
                _course = item.Courses.FirstOrDefault(x => x.Id == selCourseInt);
                _modules = _course.Modules;
                if (_course != null)
                    _groupsForSelect.Add(item);
            }

        }

    }

    private void ChangeGroup(ChangeEventArgs eventArgs)
    {
        _studentsForSelect.Clear();
        _students.Clear();

        var selGroupInt = Convert.ToInt32(eventArgs.Value);
        if (selGroupInt == -1)
            return;
        else
            _studentsForSelect = _teacher.Groups.First(x => x.Id == selGroupInt).Students.ToList();

    }

    private void ChangeStudent(ChangeEventArgs eventArgs)
    {
        var selStudentInt = Convert.ToInt32(eventArgs.Value);
        if (selStudentInt == -1)
            return;
        else if (selStudentInt == 0)
            _students = new(_studentsForSelect);
        else
        {
            _students.Clear();
            var curStudent = _studentsForSelect.First(x => x.Id == selStudentInt);
            _students.Add(curStudent);
            _resultTestForSelect = curStudent.ResultTests.Where(x => x.Test.Module.Course.Id == _course.Id).ToList();
            //_resultKoanTests.Clear();
            if (_resultTestForSelect.Count > 0)
            {
                _resultTest = _resultTestForSelect.First();
                _test = _resultTest.Test;
                _curResultKoanTest = _resultTest.ResultKoanTests.First();
                //_resultTest.ResultKoanTests
                //_test = _resultTestForSelect.First();
                //foreach(var item in _test.KoanInTests)
                //{
                //    item.ResultKoanTests.Where(x=>x.ResultTestId.Equals())
                //    _resultKoanTests.Add();
                //}
                //_resultKoanTests = _test.KoanInTests.Where(x=>x.ResultKoanTests.Where(x=>x.))
                //_koan = _test.KoanInTests.First().Koan;

            }
            else
            {
                _test = null; //возможно потом это всё убрать, проверив на реальных значениях
                _resultTest = null;
                _curResultKoanTest = null;
                //_koan = null;
            }
        }
    }

    private void ChangeTestModule(ChangeEventArgs eventArgs)
    {
        var selResultTestInt = Convert.ToInt32(eventArgs.Value);
        _resultTest = _resultTestForSelect.First(x => x.Id == selResultTestInt);
        _test = _resultTest.Test;
        _curResultKoanTest = _resultTest.ResultKoanTests.First();
    }

    private void ChangeResultTestKoan(ChangeEventArgs eventArgs)
    {
        var selResultKoanTestInt = Convert.ToInt32(eventArgs.Value);
        _curResultKoanTest = _resultTest.ResultKoanTests.First(x => x.Id == selResultKoanTestInt);
    }



}

