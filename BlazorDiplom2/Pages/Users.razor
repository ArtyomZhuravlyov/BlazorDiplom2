@*@page "/users"*@

@inject RoleManager<IdentityRole> _RoleManager;
@inject UserManager<AspNetUsers> _userManager;
@inject DB _db;

@attribute [Authorize(Roles = "Administrators")]
<PageTitle>Users</PageTitle>

<div>
    @*
        @foreach (var user in users)
        {
        <div>
        <MyUser User="user" />
        </div>
        }
    *@

    @if (users == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var user in users)
        {
            <div>
                <MyUser User="user" />
            </div>
        }
    }


</div>


@code {
    private int currentCount = 0;
    private bool showRoles;
    private bool showData;
    List<AspNetUsers> users;

    protected override void OnInitialized() => users = _userManager.Users.ToList();

    //protected override async Task OnInitializedAsync()
    //{
    //    users = await Task.FromResult(_userManager.Users.ToList());
    //    //Task<List<AspNetUsers>> t = new Task<List<AspNetUsers>>(() => _userManager.Users.ToList());
    //    //t.Start();
    //    //users = await t.Result;
    //}


    //protected override async Task OnInitializedAsync()
    //{
    //    //var users = _userManager.Users.ToList();
    //    //var user = users[0];
    //    //// IdentityUser user = await _userManager.GetUserAsync(null);
    //    //    List<string> roles = new List<string>();
    //    //        roles.Add("Administrators");
    //    //        await _userManager.AddToRolesAsync(user, roles);

    //}

    private void IncrementCount()
    {
        _db.GetGroups();
    }
}
