@*@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
<CascadingValue Value="httpContextAccessor" Name="HttpContextAccessor">*@

@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject LocalStorage _storage;
@inject AuthenticationStateProvider _getAuthenticationStateAsync;
@inject UserManager<AspNetUsers> _userManager;

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
      <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <NotAuthorizedHandler />
                    Вход воспрещен!
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
@*</CascadingValue>*@
@*@code{
    [Parameter]
    public List<Cookie> Cookies { get; set; }


}*@

@code{

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if(firstRender)
        if(LocStorage.LocalStorage == null)
        {
            LocStorage.LocalStorage = _storage;
            //LocStorage LocStorageTest = new LocStorage();
            //await LocStorage.LocalStorage.SetItemAsync("TestK", Newtonsoft.Json.JsonConvert.SerializeObject(LocStorageTest));
        }

        if (CurrentUser.User == null)
             CurrentUser.SetUserAsync(_getAuthenticationStateAsync, _userManager);

    }

    //protected override async  Task OnInitializedAsync()
    //{
    //    if(LocStorage.LocalStorage == null)
    //    {
    //        LocStorage.LocalStorage = Storage;
    //        LocStorage LocStorageTest = new LocStorage();
    //        await LocStorage.LocalStorage.SetItemAsync("TestK", Newtonsoft.Json.JsonConvert.SerializeObject(LocStorageTest));
    //    }

    //}


    //[Parameter]
    //public IRequestCookieCollection ReqCookies { get; set; }

    //[Parameter]
    //public IResponseCookies ResCookies { get; set; }

    //protected override  void OnInitialized()
    //{
    //    if(Cookie.HttpContextAccessor == null)
    //    {
    //        Cookie.HttpContextAccessor = httpContextAccessor;
    //        CookieTest cookiesTest = new CookieTest();
    //        Cookie.HttpContextAccessor.HttpContext.Response.Cookies.Append("TestK", Newtonsoft.Json.JsonConvert.SerializeObject(cookiesTest));
    //    }

    //    //Cookie.ReqCookies = ReqCookies;
    //    //Cookie.ResCookies = ResCookies;
    //}

    //protected override void OnParametersSet()
    //{
    //    //Cookie.Cookies = Cookies;
    //}
}